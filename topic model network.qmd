---
title: "topic model network"
author: "mlc and kr"
format: html
editor: visual
---

```{r libraries, message=FALSE}
library(tidyverse)
library(beepr) 
library(igraph)

# From Chapter 12 lab
library(NLP)
library(tm)
library(SnowballC)
library(topicmodels) 
library(ldatuning) 
```

# Data Processing

```{r load-data, message=FALSE}
verses <- read.csv('bibledata_kr.csv')
# all verses of the Bible
```

```{r cleaning}
count(verses, Section)

verses <- verses |> 
  mutate(Section = if_else(Section == "Major 'Prophets", "Major Prophets", Section))

count(verses, Section)
```

```{r aggregate-to-chapters}
chapters <- verses |> 
  group_by(book_id, book_name, chapter) |> 
  summarize(text = paste(king_james_bible_kjv, collapse = " "), .groups = 'drop') |> 
  full_join(verses |> select(book_id, book_name, chapter, Testament, Section)) |> 
  distinct()

chapters
```

```{r filter-to-prophets}
prophets <- chapters |> 
  filter(Section == 'Major Prophets' | Section == 'Minor Prophets')
```

```{r chapters-per-book}
prophets |> 
  group_by(book_name) |> 
  summarize(n_chaps = n_distinct(chapter), .groups = 'drop') |> 
  ggplot(aes(x = book_name, 
             y = n_chaps)) + 
  geom_col(fill = 'blue4') + 
  geom_text(aes(label = n_chaps), nudge_y = 1) + 
  theme_minimal() + 
  labs(# title = 'Number of Chapters (in Biblical Order)',
       x = 'Number of Chapters', 
       y = 'Book') + 
  coord_flip()
```

```{r get-corpus}
prophet_corpus <- Corpus(VectorSource(prophets$text))

length(prophet_corpus)
```

```{r text-cleaning, warning=FALSE}
# chapter number to check 
n <- 2

# Remove capital letters
prophet_corpus <- tm_map(prophet_corpus, tolower)

prophet_corpus[[n]]$content

# Split words
gsub_function <- function(x, pattern) gsub(pattern, replacement = " ", x)
split_words <- content_transformer(gsub_function)
prophet_corpus <- tm_map(prophet_corpus, split_words, pattern = "/")

prophet_corpus[[n]]$content

# Remove punctuation
prophet_corpus <- tm_map(prophet_corpus, removePunctuation)

prophet_corpus[[n]]$content

# Remove numbers
prophet_corpus <- tm_map(prophet_corpus, removeNumbers)

prophet_corpus[[n]]$content

# Remove stopwords
prophet_corpus <- tm_map(prophet_corpus, removeWords, stopwords("english"))

prophet_corpus[[n]]$content

# myStopwords <- c("dissertation", "chapter", "chapters", "research", 
#                  "researcher" ,"researchers" ,"study", "studies", 
#                  "studied", "studys", "studying", "one", "two", "three")

# chapter_corpus <- tm_map(chapter_corpus, removeWords, myStopwords)

# Remove whitespace
prophet_corpus <- tm_map(prophet_corpus, stripWhitespace)

prophet_corpus[[n]]$content

# Stem words
prophet_corpus <- tm_map(prophet_corpus, stemDocument)

prophet_corpus[[n]]$content
```

```{r document-term-matrix}
prophet_dtm <- DocumentTermMatrix(prophet_corpus)

prophet_dtm
```

# Topic Modeling

```{r key-LDA-inputs}
burnin <- 200 # number of omitted Gibbs iterations at beginning
iter <- 3000 # number of iterations
thin <- 2000 # number of omitted iterations between each kept iteration 
seed <- list(2003, 5,63, 100001, 765) #seeds to enable reproducibility
nstart <- 5 # number of repeated random starts
best <- TRUE # only continue model on the best model
k <- 5 # number of topics
```

```{r FindTopicsNumber, message=F, results='hide', warning=F}
topic_num_model <- FindTopicsNumber(dtm = prophet_dtm, 
                             topics = seq(from = 4, to = 40, by = 2), 
                             metrics = c("CaoJuan2009", "Arun2010"), 
                             method = "Gibbs", 
                             control = list(nstart = 1, seed = c(30), 
                                            best = best, burnin = burnin, 
                                            iter = iter, thin = thin), 
                             mc.cores = 2,  verbose = TRUE)

beep(1)
topic_num_model
```

```{r plot-fitmodel}
FindTopicsNumber_plot(topic_num_model) 
```

```{r build-LDA}
k <- 40 

ldaOut <- LDA(x = prophet_dtm, k = k, method = "Gibbs", 
              control = list(nstart = nstart, seed = seed, best = best,
                             burnin = burnin, iter = iter, thin = thin))

beep(1)
```

```{r}
terms(ldaOut, 10)
```

# Build Word Network

```{r convert-to-matrix-object}
mat_prophets <- as.matrix(prophet_dtm)
dim(mat_prophets)
```

```{r filter-most-used-words}
worduse <- colSums(mat_prophets)

mat_prophets_words_subset <- mat_prophets[, worduse > 5]

dim(mat_prophets_words_subset)
```

```{r create-network}
prophet_word_net <- graph_from_biadjacency_matrix(mat_prophets_words_subset,
                                                  mode = "all", weighted = T)

prophet_word_net
```

```{r get-type-attr}
type <- vertex_attr(prophet_word_net, "type") # these are the two modes (word/chapter)

table(type)  
```

\>\>\> NEED TO GET THE BOOKS

```{r}
vertex_attr(prophet_word_net, "name")
```

```{r make-word-nodes-green}
V(prophet_word_net)$color[type == TRUE] <- rgb(red = 0, green = 1, 
                                               blue = 0, alpha = .2) 
```

```{r make-topic-color-blue}
V(prophet_word_net)$color[type == FALSE] <- rgb(red = 0, green = 0, 
                                                 blue = 1, alpha = .2)
```

```{r set-plot-arguments}
V(prophet_word_net)$label <- V(prophet_word_net)$name
V(prophet_word_net)$label[type == TRUE] <- NA 
V(prophet_word_net)$label.color <- rgb(0, 0, .2, .85)
V(prophet_word_net)$label.cex <- .75
V(prophet_word_net)$size <- 3
V(prophet_word_net)$frame.color <- V(prophet_word_net)$color
```

```{r set-edge-color}
E(prophet_word_net)$color <- rgb(0.3, 0.3, 0.3, 0.08)
```

```{r plot, fig.height=9.5, fig.width=9.5}
set.seed(106)
plot(prophet_word_net, layout = layout_with_fr)
```

# Build Book-to-Topic Network

```{r get-topics-by-chapter}
ldaOut_topics <- topics(ldaOut)

# Add to tibble
prophets_topics <- prophets |> 
  mutate(ldaTopic = ldaOut_topics)

prophets_topics
```

```{r number-of-topics-by-book, message=FALSE, warning=FALSE}
prophets_topics |> 
  group_by(book_name) |> 
  summarize(n_chaps = n_distinct(chapter), 
            n_topics = n_distinct(ldaTopic), .groups = 'drop') |> 
  mutate(topics_chap_ratio = n_topics/n_chaps)

prophets_topics |> 
  group_by(book_name) |> 
  summarize(n_chaps = n_distinct(chapter), 
            n_topics = n_distinct(ldaTopic), .groups = 'drop') |> 
  mutate(topics_chap_ratio = n_topics/n_chaps) |> 
  ggplot(aes(y = n_topics, x = n_chaps)) + 
  geom_point() + 
  geom_smooth(method = 'lm', se = F) + 
  geom_smooth(method = 'loess', color = 'red', se = F)
```

```{r view-most-common-topics}
plot(ldaOut_topics)
hist(ldaOut_topics)

ggplot(prophets_topics, aes(x = ldaTopic)) + 
  geom_histogram(bins = 40) + 
  theme_minimal() + 
  labs(title = "Frequency of Topics")

topic_counts <- prophets_topics %>%
  count(ldaTopic)

ggplot(topic_counts, 
       aes(x = ldaTopic, 
           y = n)) + 
  geom_col(fill = 'blue4') + 
  geom_text(aes(label = n), 
            nudge_y = 1.25) +
  theme_minimal() + 
  labs(title = "Frequency of Topics",
       subtitle = 'Label is the number of times the topic occurs across all books',
       y = 'Frequency of Topic') +
  theme(legend.position = 'none')+
  scale_x_continuous(breaks = unique(topic_counts$ldaTopic))
```

```{r create-biadjacency-matrix}
row_nodes <- unique(prophet_top_edgelist$book_name)
col_nodes <- unique(prophet_top_edgelist$ldaTopic)

# Initialize the biadjacency matrix with zeros
biadj_matrix <- matrix(0, nrow = length(row_nodes), ncol = length(col_nodes),
                       dimnames = list(row_nodes, col_nodes))

# Populate the biadjacency matrix
for (i in 1:nrow(prophet_top_edgelist)) {
  row <- prophet_top_edgelist$book_name[i]
  col <- prophet_top_edgelist$ldaTopic[i]
  biadj_matrix[row, col] <- biadj_matrix[row, col] + 1
}

prophet_topic_net <- graph_from_biadjacency_matrix(incidence= biadj_matrix, 
                                                   mode = 'all')
```

```{r}
type <- vertex_attr(prophet_topic_net, "type") # these are the two modes (word/chapter)

table(type)  
```

```{r plot, fig.height=9.5, fig.width=9.5}
# topic color
V(prophet_topic_net)$color[type == TRUE] <- rgb(red = 0, green = 0.5, 
                                               blue = 0, alpha = .2) 

# book color
V(prophet_topic_net)$color[type == FALSE] <- rgb(red = 0, green = 0, 
                                                 blue = 1, alpha = 0.5)


set.seed(106)
plot(prophet_topic_net, layout = layout_with_fr)
```
