---
title: "network trained on all chapters"
author: "mlc and kmr"
format: html
editor: visual
---

```{r libraries, message=FALSE}
library(tidyverse)
library(beepr) 
library(igraph)
library(janitor) # clean_names()
library(GGally) # ggnet plotting
library(ergm)

# From Chapter 12 lab
library(NLP)
library(tm)
library(SnowballC)
library(topicmodels) 
library(ldatuning) 
```

# Data Processing

```{r load-data, message=FALSE}
verses <- read.csv('bibledata_kr.csv')
# all verses of the Bible
```

```{r cleaning}
count(verses, Section)

verses <- verses |> 
  mutate(Section = if_else(Section == "Major 'Prophets", "Major Prophets", Section))

count(verses, Section)
```

```{r aggregate-to-chapters}
chapters <- verses |> 
  group_by(book_id, book_name, chapter) |> 
  summarize(text = paste(king_james_bible_kjv, collapse = " "), .groups = 'drop') |> 
  full_join(verses |> select(book_id, book_name, chapter, Testament, Section)) |> 
  distinct()

chapters
```

```{r chapters-per-book}
chapters |> 
  group_by(book_name) |> 
  summarize(n_chaps = n_distinct(chapter), .groups = 'drop') |> 
  ggplot(aes(x = forcats::fct_reorder(book_name, n_chaps), 
             y = n_chaps)) + 
  geom_col(fill = 'blue4') + 
  geom_text(aes(label = n_chaps), nudge_y = 1) + 
  theme_minimal() + 
  labs(# title = 'Number of Chapters (in Biblical Order)',
       x = 'Number of Chapters', 
       y = 'Book') + 
  coord_flip()
```

```{r get-corpus}
bible_corpus <- Corpus(VectorSource(chapters$text))

length(bible_corpus)
```

```{r text-cleaning, warning=FALSE}
# chapter number to check 
n <- 2

# Remove capital letters
bible_corpus <- tm_map(bible_corpus, tolower)

bible_corpus[[n]]$content

# Split words
gsub_function <- function(x, pattern) gsub(pattern, replacement = " ", x)
split_words <- content_transformer(gsub_function)
bible_corpus <- tm_map(bible_corpus, split_words, pattern = "/")

bible_corpus[[n]]$content

# Remove punctuation
bible_corpus <- tm_map(bible_corpus, removePunctuation)

bible_corpus[[n]]$content

# Remove numbers
bible_corpus <- tm_map(bible_corpus, removeNumbers)

bible_corpus[[n]]$content

# Remove stopwords
bible_corpus <- tm_map(bible_corpus, removeWords, stopwords("english"))

bible_corpus[[n]]$content

# Remove whitespace
bible_corpus <- tm_map(bible_corpus, stripWhitespace)

bible_corpus[[n]]$content

# Stem words
bible_corpus <- tm_map(bible_corpus, stemDocument)

bible_corpus[[n]]$content
```

```{r document-term-matrix}
bible_dtm <- DocumentTermMatrix(bible_corpus)

bible_dtm
```

```{r remove-specific-stopwords}
mat_bible <- as.matrix(bible_dtm)
worduse <- colSums(mat_bible)
words <- colnames(mat_bible)

tibble(words, worduse) |> 
  arrange(desc(worduse))

kjv_stopwords <- c('shall', 'unto', 'thou', 'thee', 'thi', 
                   'saith', 'upon', 'hath', 'say', 'thus', 'come', 
                   'said', 'therefor', 'thereof', 'shalt', 'also', 
                   'everi', 'hast', 'forth', 'came', 'like', 'let', 
                   'thine', 'mine', 'thing', 'among', 'now', 'went', 
                   'say', 'wherein', 'peopl', 'even', 'now', 'may', 
                   'put', 'neither', 'mose', 'two')

# Remove new stopwords
bible_corpus <- tm_map(bible_corpus, removeWords, kjv_stopwords)

# Remove whitespace
bible_corpus <- tm_map(bible_corpus, stripWhitespace)

bible_corpus[[n]]$content
```

```{r remake-dtm}
bible_dtm <- DocumentTermMatrix(bible_corpus)

bible_dtm
```

# Topic Modeling

```{r key-LDA-inputs}
burnin <- 200 # number of omitted Gibbs iterations at beginning
iter <- 3000 # number of iterations
thin <- 2000 # number of omitted iterations between each kept iteration 
seed <- list(2003, 5,63, 100001, 765) #seeds to enable reproducibility
nstart <- 5 # number of repeated random starts
best <- TRUE # only continue model on the best model
k <- 5 # number of topics
```

```{r FindTopicsNumber, message=F, results='hide', warning=F}
topic_num_model_bible <- FindTopicsNumber(dtm = bible_dtm, 
                             topics = seq(from = 60, to = 100, by = 2), 
                             metrics = c("CaoJuan2009", "Arun2010"), 
                             method = "Gibbs", 
                             control = list(nstart = 1, seed = c(30), 
                                            best = best, burnin = burnin, 
                                            iter = iter, thin = thin), 
                             mc.cores = 2,  verbose = TRUE)

beep(1)
topic_num_model_bible
```

```{r plot-fitmodel}
FindTopicsNumber_plot(topic_num_model_bible) 
```

```{r build-LDA}
k <- 80

ldaOut <- LDA(x = bible_dtm, k = k, method = "Gibbs", 
              control = list(nstart = nstart, seed = seed, best = best,
                             burnin = burnin, iter = iter, thin = thin))

beep(1)
```

```{r view-topic-terms}
terms(ldaOut, 10) |> as_tibble()
```

```{r topic-probabilities}
# Get the posterior probabilities
posterior_probs <- posterior(ldaOut)

# Extract the topic probabilities for each document
topic_probabilities <- posterior_probs$topics

# Print the topic probabilities for each document
top_five_long <- topic_probabilities |> as_tibble() |> 
  mutate(chapter = topic_probabilities |> row.names()) |> 
  select(chapter, everything()) |> 
  clean_names() |> 
  pivot_longer(cols = -chapter, 
               names_to = 'topic', 
               values_to = 'probability') |> 
  mutate(topic = str_remove(topic, 'x'), 
         topic = paste0('topic_', topic), 
         chapter = as.numeric(chapter)) |> 
  group_by(chapter) |> 
  arrange(chapter, desc(probability)) |> 
  slice_head(n = 5) |> 
  ungroup() |> 
  group_by(chapter) |> 
  mutate(top_topics = c('topic_1st',
                        'topic_2nd',
                        'topic_3rd',
                        'topic_4th',
                        'topic_5th')) |> 
  ungroup() 

top_five <- top_five_long |> 
  pivot_wider(names_from = top_topics, 
              values_from = c(topic, probability))

top_five
top_five_long
```

```{r filter-to-most-likely-topics}
threshold <- 0.70 # sets how much lower than the highest probability topic another topic has to be to be included

top_prob_topics <- top_five_long |> 
  group_by(chapter) |> 
  mutate(max_prob = max(probability)) |> 
  ungroup() |> 
  group_by(chapter, top_topics) |> 
  filter(probability > threshold*max_prob) |> 
  ungroup()

top_prob_topics
```

```{r pivot-wide}
top_prob_topics_wide <- top_prob_topics |> 
  pivot_wider(names_from = top_topics, 
              values_from = c(topic, probability))

top_prob_topics_wide
```

# Build Chapter-to-Topic Network (multi topic)

```{r add-all-topics-by-chapter}
# see code for top_prob_topics above for getting top_prob_topics_wide

# Add to tibble
chapters <- chapters|> 
  rename(chapter_in_book = chapter) |> 
  mutate(chapter = 1:1189, 
         chapter = as.numeric(chapter))


chapters_topics_multi <- left_join(chapters,
                                   as_tibble(top_prob_topics_wide), 
                                   by = join_by(chapter))

chapters_topics_multi
```

```{r pivot-long}
chapters_topics_multi_long <- chapters_topics_multi |> 
  pivot_longer(cols = topic_topic_1st:topic_topic_5th, 
               names_to = 'topic_rank', 
               values_to = 'ldaTopic') |> 
  mutate(ldaTopic = str_remove(ldaTopic, 'topic_'), 
         ldaTopic = as.numeric(ldaTopic))

chapters_topics_multi_long <- chapters_topics_multi_long |> 
  filter(!is.na(ldaTopic))

chapters_topics_multi_long
```

## Analysis of Topics

```{r number-of-topics-by-book, message=FALSE, warning=FALSE}
chapters_topics_multi_long |>  
  group_by(book_name) |> 
  summarize(n_chaps = n_distinct(chapter), 
            n_topics = n_distinct(ldaTopic), .groups = 'drop') |> 
  mutate(topics_chap_ratio = n_topics/n_chaps) |> 
  arrange(desc(topics_chap_ratio))

chapters_topics_multi_long |> 
  group_by(book_name) |> 
  summarize(n_chaps = n_distinct(chapter), 
            n_topics = n_distinct(ldaTopic), .groups = 'drop') |> 
  mutate(topics_chap_ratio = n_topics/n_chaps) |> 
  ggplot(aes(y = n_topics, x = n_chaps)) + 
  geom_point() + 
  geom_smooth(method = 'lm', se = F) + 
  geom_smooth(method = 'loess', color = 'red', se = F)
```

```{r data-viz-topics-all-books}
# topic by chapter
topic_counts2 <- chapters_topics_multi_long %>%
  count(ldaTopic) 

ggplot(topic_counts2, 
       aes(x = ldaTopic, 
           y = n)) + 
  geom_col(fill = 'blue4') + 
  geom_text(aes(label = n), 
            nudge_y = 1.25) +
  theme_minimal() + 
  labs(title = "Frequency of Topics",
       subtitle = 'Label is the number of times the topic occurs across all books',
       y = 'Frequency of Topic by Chapters') +
  theme(legend.position = 'none')+
  scale_x_continuous(breaks = unique(topic_counts2$ldaTopic))


# topic by book
chapters_topics_multi_long |> 
  group_by(book_name, ldaTopic) |> 
  summarize(n = n(), .groups = 'drop') |>
  arrange(desc(n)) 

chapters_topics_multi_long |> 
  group_by(book_name, ldaTopic) |> 
  summarize(n = n(), .groups = 'drop') |>
  mutate(book_topic = paste0(book_name, "_", as.character(ldaTopic))) |>
  ggplot(aes(x = ldaTopic,
             y = n)) +
  geom_col() +
  facet_wrap(~book_name)


# which books have the most topics and chapters
combined_data <- chapters_topics_multi_long |> 
  group_by(book_name) |> 
  summarize(n_chaps = n_distinct(chapter), 
            n_tops = n_distinct(ldaTopic), 
            .groups = 'drop') |> 
  pivot_longer(cols = c(n_chaps, n_tops), 
               names_to = "metric", 
               values_to = "value")

# Plot with facets and rotated x-axis labels
ggplot(combined_data, aes(x = value, y = forcats::fct_reorder(book_name, value))) + 
  geom_col(aes(fill = metric)) + 
  facet_wrap(~ metric, scales = "free_x") + 
  theme_minimal() + 
  labs(x = "Value", y = "Book Name", fill = "Metric")

rm(combined_data)

chapters_topics_multi_long |> 
  group_by(book_name) |> 
  summarize(n_chaps = n_distinct(chapter), 
            n_tops = n_distinct(ldaTopic), 
            .groups = 'drop') |>
  mutate(tops_by_book_length = n_tops/n_chaps) |> 
  ggplot(aes(y = forcats::fct_reorder(book_name, tops_by_book_length),  
             x = tops_by_book_length)) + 
  geom_col(fill = 'blue4') + 
  theme_minimal()
```

```{r data-viz-topics-prophet-books}
chapters_topics_multi_prophets <- chapters_topics_multi_long |> 
  filter(Section == 'Major Prophets' | Section == 'Minor Prophets')

# topic by chapter
topic_counts3 <- chapters_topics_multi_prophets %>%
  count(ldaTopic) 

ggplot(topic_counts3, 
       aes(x = ldaTopic, 
           y = n)) + 
  geom_col(fill = 'blue4') + 
  geom_text(aes(label = n), 
            nudge_y = 1.25) +
  theme_minimal() + 
  labs(title = "Frequency of Topics",
       subtitle = 'Label is the number of times the topic occurs across all books',
       y = 'Frequency of Topic by Chapters') +
  theme(legend.position = 'none')+
  scale_x_continuous(breaks = unique(topic_counts3$ldaTopic))


# topic by book
chapters_topics_multi_prophets |> 
  group_by(book_name, ldaTopic) |> 
  summarize(n = n(), .groups = 'drop') |>
  arrange(desc(n)) 

chapters_topics_multi_long |> 
  group_by(book_name, ldaTopic) |> 
  summarize(n = n(), .groups = 'drop') |>
  mutate(book_topic = paste0(book_name, "_", as.character(ldaTopic))) |>
  ggplot(aes(x = ldaTopic,
             y = n)) +
  geom_col() +
  facet_wrap(~book_name)


# which books have the most topics and chapters
combined_data <- chapters_topics_multi_prophets |> 
  group_by(book_name) |> 
  summarize(n_chaps = n_distinct(chapter), 
            n_tops = n_distinct(ldaTopic), 
            .groups = 'drop') |> 
  pivot_longer(cols = c(n_chaps, n_tops), 
               names_to = "metric", 
               values_to = "value")

# Plot with facets and rotated x-axis labels
ggplot(combined_data, aes(x = value, y = forcats::fct_reorder(book_name, value))) + 
  geom_col(aes(fill = metric)) + 
  facet_wrap(~ metric, scales = "free_x") + 
  theme_minimal() + 
  labs(x = "Value", y = "Book Name", fill = "Metric")

rm(combined_data)

chapters_topics_multi_prophets |> 
  group_by(book_name) |> 
  summarize(n_chaps = n_distinct(chapter), 
            n_tops = n_distinct(ldaTopic), 
            .groups = 'drop') |>
  mutate(tops_by_book_length = n_tops/n_chaps) |> 
  ggplot(aes(y = forcats::fct_reorder(book_name, tops_by_book_length),  
             x = tops_by_book_length)) + 
  geom_col(fill = 'blue4') + 
  theme_minimal()
```

## Build Network

```{r create-biadjacency-matrix}
chapters_prophet_top_multi_edgelist <- chapters_topics_multi_prophets |> 
  mutate(ldaTopic = as.character(ldaTopic)) |> 
  select(book_name, chapter, ldaTopic) |> 
  mutate(chapter = as.character(chapter))

row_nodes <- unique(chapters_prophet_top_multi_edgelist$chapter)
col_nodes <- unique(chapters_prophet_top_multi_edgelist$ldaTopic)

# Initialize the biadjacency matrix with zeros
biadj_matrix <- matrix(0, nrow = length(row_nodes), ncol = length(col_nodes),
                       dimnames = list(row_nodes, col_nodes))


# Populate the biadjacency matrix
for (i in 1:nrow(chapters_prophet_top_multi_edgelist)) {
  row <- chapters_prophet_top_multi_edgelist$chapter[i]
  col <- chapters_prophet_top_multi_edgelist$ldaTopic[i]
  biadj_matrix[row, col] <- biadj_matrix[row, col] + 1
}

chapter_prophet_topic_multi_net <- 
  graph_from_biadjacency_matrix(incidence = biadj_matrix,
                                mode = 'all')

chapter_prophet_topic_multi_net
```

```{r check-two-mode}
type <- vertex_attr(chapter_prophet_topic_multi_net, "type") # these are the two modes (word/chapter)

table(type)  
```

```{r add-book-attr-to-chapter-nodes}
V(chapter_prophet_topic_multi_net)$book[type == FALSE] <- prophets_topics_multi$book_name

chapter_prophet_topic_multi_net
```

```{r plot}
# topic color and label
V(chapter_prophet_topic_multi_net)$color[type == TRUE] <- rgb(red = 0, green = 1, 
                                               blue = 0, alpha = 0.2) 

V(chapter_prophet_topic_multi_net)$label[type == TRUE] <- 
  V(chapter_prophet_topic_multi_net)[type == TRUE]$name

# chapter color and labeled by book
V(chapter_prophet_topic_multi_net)$color[type == FALSE] <- rgb(red = 0, green = 0, 
                                                 blue = 1, alpha = 0.1)

V(chapter_prophet_topic_multi_net)$label[type == FALSE] <- 
  V(chapter_prophet_topic_multi_net)[type == FALSE]$book


set.seed(106)
# plot(chapter_topic_multi_net, layout = layout_with_fr) 

# Labeled by Book
ggnet2(net = chapter_prophet_topic_multi_net, 
       node.color = V(chapter_prophet_topic_multi_net)$type,
       palette = c("TRUE" = 'skyblue', 
                   'FALSE' = 'yellow3'),
       node.label = V(chapter_prophet_topic_multi_net)$label)


# Colored by Book
ggnet2(chapter_prophet_topic_multi_net, 
       node.color = if_else(V(chapter_prophet_topic_multi_net)$type == FALSE, 
                            V(chapter_prophet_topic_multi_net)$label, 
                            'TopicNum'),
       palette = c(TopicNum = 'red2',
                   Isaiah = 'darkgreen',
                   Jeremiah = 'green4',
                   Lamentations = 'green3',
                   Ezekiel = 'green2',
                   Daniel = 'lightgreen',
                   Hosea = 'grey15',
                   Amos = 'grey20',
                   Obadiah = 'grey25',
                   Jonah = 'grey30',
                   Micah = 'grey35',
                   Joel = 'grey40',
                   Nahum = 'grey45',
                   Habakkuk = 'grey50',
                   Zephaniah = 'grey55',
                   Haggai = 'grey60',
                   Zechariah = 'grey65',
                   Malachi = 'grey70'),
       node.label = if_else(V(chapter_prophet_topic_multi_net)$type == TRUE, 
                            V(chapter_prophet_topic_multi_net)$label, 
                            ""))
```

# Build Book-to-Topic Network (multi topic)

```{r add-all-topics-by-chapter}
# see code in previous section for the analysis of books, chapters, and topics
```

```{r create-biadjacency-matrix}
chapter_prophet_top_multi_edgelist <- chapters_topics_multi_prophets |> 
  mutate(ldaTopic = as.character(ldaTopic)) |> 
  select(book_name, chapter, ldaTopic) |> 
  mutate(chapter = as.character(chapter))

row_nodes <- unique(chapter_prophet_top_multi_edgelist$book_name)
col_nodes <- unique(chapter_prophet_top_multi_edgelist$ldaTopic)

# Initialize the biadjacency matrix with zeros
biadj_matrix <- matrix(0, nrow = length(row_nodes), ncol = length(col_nodes),
                       dimnames = list(row_nodes, col_nodes))

# Populate the biadjacency matrix
for (i in 1:nrow(chapter_prophet_top_multi_edgelist)) {
  row <- chapter_prophet_top_multi_edgelist$book_name[i]
  col <- chapter_prophet_top_multi_edgelist$ldaTopic[i]
  biadj_matrix[row, col] <- biadj_matrix[row, col] + 1
}

chapter_prophet_top_multi_net <- graph_from_biadjacency_matrix(incidence = biadj_matrix, 
                                                         mode = 'all')

chapter_prophet_top_multi_net
```

```{r check-two-mode}
type <- vertex_attr(chapter_prophet_top_multi_net, "type") # these are the two modes (word/chapter)

table(type)  
```

```{r plot, fig.height=8, fig.width=8}
# topic color 
V(chapter_prophet_top_multi_net)$color[type == TRUE] <- rgb(red = 0, green = 1, 
                                               blue = 0, alpha = 0.2) 

# book color 
V(chapter_prophet_top_multi_net)$color[type == FALSE] <- rgb(red = 0, green = 0, 
                                                 blue = 1, alpha = 0.5)

set.seed(106)
plot(chapter_prophet_top_multi_net, layout = layout_with_fr) 
```

# Network Analysis

RQ:

```{r create-network-object}
# Made from the book-topic network (not chapter-topic)

# For adding Major/Minor Prophet attribute to network
attribute_list <- do.call(list, as.list(chapters_topics_multi_prophets |>
                                          #mutate(Section = as.factor(Section)) |>
                                          select(chapter, Section)))

# Build Network
final_net <- network(biadj_matrix, bipartite = T, 
                     vertex.attr = attribute_list) 

final_net
```

```{r build-edge-model warning=F, message=F}
mod1 <- ergm(final_net ~ edges)

summary(mod1)
```

We can interpret the coefficient in terms of the baseline probability of a tie existing. The probability is: `exp(-1.7309) / (1 + exp(-1.7309))` = 0.15047249608. Thus, about 15% of all possible edges actually exist.

```{r model-with-mode2-term}
mod2 <- ergm(final_net ~ edges + b2factor("Section", levels = 1))

summary(mod2)
```

```{r model-with-homophily-term}
set.seed(1234)
mod3 <- ergm(final_net ~ edges 
             # + b2factor("Section") 
             + b2nodematch("Section", beta = 0.25))

summary(mod3)
```

```{r check-diagnostics}
mcmc.diagnostics(mod3)
```
