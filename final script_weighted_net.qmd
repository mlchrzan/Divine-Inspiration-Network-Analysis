---
title: "final script"
author: "mlc and kmr"
format: html
editor: visual
---

```{r libraries, message=FALSE}
library(tidyverse)
library(beepr) 
library(igraph)
library(janitor) # clean_names()
library(GGally) # ggnet plotting
library(sjPlot) # for creating tables for final paper

# From Chapter 12 lab
library(NLP)
library(tm)
library(SnowballC)
library(topicmodels) 
library(ldatuning) 
```

# Data Processing

```{r load-data, message=FALSE}
verses <- read.csv('bibledata.csv')
# all verses of the Bible

verses
```

```{r cleaning}
count(verses, Section)

verses <- verses |> 
  mutate(Section = if_else(Section == "Major 'Prophets", "Major Prophets", Section))

count(verses, Section)
```

```{r descriptive-table}
verses |>
  clean_names() |> 
  select(-starts_with('ordered'), -starts_with('book'), book_name, book_chapter) |> 
  mutate(across(everything(), as.character)) |> 
  pivot_longer(cols = everything(), 
               names_to = 'variable', 
               values_to = 'value') |> 
  group_by(variable) |> 
  summarize(n = n_distinct(value), .groups = 'drop') |> 
  filter(variable != 'chapter') |> 
  mutate(variable = case_when(variable == "book_chapter" ~ "Chapters", 
                              variable == 'book_name' ~ "Books", 
                              variable == 'id' ~ 'Verses',
                              variable == 'testament' ~ 'Testaments',
                              variable == 'section' ~ 'Sections',
                              .default = variable)) |> 
  arrange(variable) |> 
  slice_head(n = 5) |> 
  tab_df()
```

```{r aggregate-to-chapters}
chapters <- verses |> 
  group_by(book_id, book_name, chapter) |> 
  summarize(text = paste(king_james_bible_kjv, collapse = " "), .groups = 'drop') |> 
  full_join(verses |> select(book_id, book_name, 
                             chapter, book.ch.a,
                             Testament, Section)) |> 
  distinct()

chapters
```

```{r chapters-per-book}
chapters |> 
  group_by(book_name) |> 
  summarize(n_chaps = n_distinct(chapter), .groups = 'drop') |> 
  ggplot(aes(x = forcats::fct_reorder(book_name, n_chaps), 
             y = n_chaps)) + 
  geom_col(fill = 'blue4') + 
  geom_text(aes(label = n_chaps), nudge_y = 1) + 
  theme_minimal() + 
  labs(# title = 'Number of Chapters (in Biblical Order)',
       x = 'Number of Chapters', 
       y = 'Book') + 
  coord_flip()
```

```{r get-corpus}
bible_corpus <- Corpus(VectorSource(chapters$text))

length(bible_corpus)
```

```{r text-cleaning, warning=FALSE}
# chapter number to check 
n <- 2

# Remove capital letters
bible_corpus <- tm_map(bible_corpus, tolower)

bible_corpus[[n]]$content

# Split words
gsub_function <- function(x, pattern) gsub(pattern, replacement = " ", x)
split_words <- content_transformer(gsub_function)
bible_corpus <- tm_map(bible_corpus, split_words, pattern = "/")

bible_corpus[[n]]$content

# Remove punctuation
bible_corpus <- tm_map(bible_corpus, removePunctuation)

bible_corpus[[n]]$content

# Remove numbers
bible_corpus <- tm_map(bible_corpus, removeNumbers)

bible_corpus[[n]]$content

# Remove stopwords
bible_corpus <- tm_map(bible_corpus, removeWords, stopwords("english"))

bible_corpus[[n]]$content

# Remove whitespace
bible_corpus <- tm_map(bible_corpus, stripWhitespace)

bible_corpus[[n]]$content
?stemDocument
# Stem words
bible_corpus <- tm_map(bible_corpus, stemDocument)

bible_corpus[[n]]$content
```

```{r document-term-matrix}
bible_dtm <- DocumentTermMatrix(bible_corpus)

bible_dtm
```

```{r remove-specific-stopwords}
mat_bible <- as.matrix(bible_dtm)
worduse <- colSums(mat_bible)
words <- colnames(mat_bible)

tibble(words, worduse) |> 
  arrange(desc(worduse))

kjv_stopwords <- c('shall', 'unto', 'thou', 'thee', 'thi', 
                   'saith', 'upon', 'hath', 'say', 'thus', 'come', 
                   'said', 'therefor', 'thereof', 'shalt', 'also', 
                   'everi', 'hast', 'forth', 'came', 'like', 'let', 
                   'thine', 'mine', 'thing', 'among', 'now', 'went', 
                   'say', 'wherein', 'peopl', 'even', 'now', 'may', 
                   'put', 'neither', 'mose', 'two')

# Remove new stopwords
bible_corpus <- tm_map(bible_corpus, removeWords, kjv_stopwords)

# Remove whitespace
bible_corpus <- tm_map(bible_corpus, stripWhitespace)

bible_corpus[[n]]$content
```

```{r remake-dtm}
bible_dtm <- DocumentTermMatrix(bible_corpus)

bible_dtm
```

```{r create-variables}
# Number of chapters per book
chapters <- chapters |> 
  group_by(book_id) |> 
  mutate(n_chaps = n_distinct(chapter)) |> 
  ungroup()

# Number of Words per Chapter
mat_bible2 <- as.matrix(bible_dtm)
wordcount <- rowSums(mat_bible2)

chapters <- chapters |> 
  mutate(n_words = wordcount) 

# Number of Words per Book
chapters <- chapters |> 
  group_by(book_id) |> 
  mutate(n_words_book = sum(n_words)) |> 
  ungroup()

chapters
```

# Topic Modeling

```{r key-LDA-inputs}
burnin <- 200 # number of omitted Gibbs iterations at beginning
iter <- 3000 # number of iterations
thin <- 2000 # number of omitted iterations between each kept iteration 
seed <- list(2003, 5,63, 100001, 765) #seeds to enable reproducibility
nstart <- 5 # number of repeated random starts
best <- TRUE # only continue model on the best model
k <- 5 # number of topics
```

```{r FindTopicsNumber, message=F, results='hide', warning=F}
topic_num_model_bible <- FindTopicsNumber(dtm = bible_dtm, 
                             topics = seq(from = 60, to = 100, by = 2), 
                             metrics = c("CaoJuan2009", "Arun2010"), 
                             method = "Gibbs", 
                             control = list(nstart = 1, seed = c(30), 
                                            best = best, burnin = burnin, 
                                            iter = iter, thin = thin), 
                             mc.cores = 2,  verbose = TRUE)

beep(1)
topic_num_model_bible
```

```{r plot-fitmodel}
FindTopicsNumber_plot(topic_num_model_bible) 
```

```{r build-LDA}
k <- 80

ldaOut <- LDA(x = bible_dtm, k = k, method = "Gibbs", 
              control = list(nstart = nstart, seed = seed, best = best,
                             burnin = burnin, iter = iter, thin = thin))

beep(1)
```

```{r view-topic-terms}
topics <- terms(ldaOut, 10) |> 
  as_tibble() |>
  mutate(word = paste0("word", 1:10)) |> 
  pivot_longer(cols = -word,
               names_to = 'topic_num', 
               values_to = 'topic_word') |> 
  pivot_wider(names_from = word, 
              values_from = topic_word) |> 
  mutate(topic_num = str_remove(topic_num, "Topic "))

tab_df(topics, 
       col.header = c("Topic Number", 
                      "Word 1", 
                      "Word 2", 
                      "Word 3", 
                      "Word 4", 
                      "Word 5", 
                      "Word 6", 
                      "Word 7", 
                      "Word 8", 
                      "Word 9", 
                      "Word 10"))

terms(ldaOut, 10) |> as_tibble()
```

```{r topic-probabilities}
# Get the posterior probabilities
posterior_probs <- posterior(ldaOut)

# Extract the topic probabilities for each document
topic_probabilities <- posterior_probs$topics

# Print the topic probabilities for each document
top_five_long <- topic_probabilities |> as_tibble() |> 
  mutate(chapter = topic_probabilities |> row.names()) |> 
  select(chapter, everything()) |> 
  clean_names() |> 
  pivot_longer(cols = -chapter, 
               names_to = 'topic', 
               values_to = 'probability') |> 
  mutate(topic = str_remove(topic, 'x'), 
         topic = paste0('topic_', topic), 
         chapter = as.numeric(chapter)) |> 
  group_by(chapter) |> 
  arrange(chapter, desc(probability)) |> 
  slice_head(n = 5) |> 
  ungroup() |> 
  group_by(chapter) |> 
  mutate(top_topics = c('topic_1st',
                        'topic_2nd',
                        'topic_3rd',
                        'topic_4th',
                        'topic_5th')) |> 
  ungroup() 

top_five <- top_five_long |> 
  pivot_wider(names_from = top_topics, 
              values_from = c(topic, probability))

top_five
top_five_long
```

```{r filter-to-most-likely-topics}
threshold <- 0.70 # sets how much lower than the highest probability topic another topic has to be to be included

top_prob_topics <- top_five_long |> 
  group_by(chapter) |> 
  mutate(max_prob = max(probability)) |> 
  ungroup() |> 
  group_by(chapter, top_topics) |> 
  filter(probability > threshold*max_prob) |> 
  ungroup()

top_prob_topics
```

```{r pivot-wide}
top_prob_topics_wide <- top_prob_topics |> 
  pivot_wider(names_from = top_topics, 
              values_from = c(topic, probability))

top_prob_topics_wide
```

```{r add-all-topics-by-chapter}
chapters <- chapters |> 
  rename(chapter_in_book = chapter) |> 
  mutate(chapter = 1:1189, 
         chapter = as.numeric(chapter))


chapters_topics_multi <- left_join(chapters,
                                   as_tibble(top_prob_topics_wide), 
                                   by = join_by(chapter))

chapters_topics_multi
```

```{r pivot-long}
chapters_topics_multi_long <- chapters_topics_multi |> 
  pivot_longer(cols = topic_topic_1st:topic_topic_5th, 
               names_to = 'topic_rank', 
               values_to = 'ldaTopic') |> 
  mutate(ldaTopic = str_remove(ldaTopic, 'topic_'), 
         ldaTopic = as.numeric(ldaTopic))

chapters_topics_multi_long <- chapters_topics_multi_long |> 
  filter(!is.na(ldaTopic))

chapters_topics_multi_long
```

```{r filter-to-prophets}
chapters_topics_multi_prophets <- chapters_topics_multi_long |> 
  filter(Section == 'Major Prophets' | Section == 'Minor Prophets')

chapters_topics_multi_prophets
```

## Exploration of Topics

(can reproduce some plots I had in the original file just exploring how the topics show up or skip, ask Kennedy on Monday)

```{r topics-per-chapter-prophet-dist}
plot <- chapters_topics_multi_prophets |> 
  group_by(book.ch.a) |> 
  summarize(n_tops = n_distinct(ldaTopic), .groups = 'drop') |> 
  group_by(n_tops) |> 
  mutate(count = n()) |> 
  select(-book.ch.a) |> 
  distinct() |> 
  ungroup() |> 
  ggplot(aes(x = n_tops, 
             y = count)) + 
  geom_col(fill = rgb(red = 1, green = 0.5, blue = 0.5)) + 
  theme_minimal() + 
  labs(title = "Distribution of Number of Topics within a Chapter", 
       subtitle = 'Most Chapters have only one Topic and only one Chapter is assigned five distinct topics', 
       x = 'Number of Topics')

ggsave("num_tops_dist.png", plot = plot, 
       width = 8, height = 4.5, dpi = 1200, 
       bg = 'white')
plot
```

```{r topics-per-chapter-all-books}
chapters_topics_multi_long |> 
  group_by(chapter) |> 
  summarize(n_tops = n_distinct(ldaTopic), .groups = 'drop') |> 
  arrange(desc(n_tops))
```

```{r topics-per-section}
chapters_topics_multi_prophets |> 
  group_by(Section, ldaTopic) |> 
  summarize(n_tops = n_distinct(ldaTopic), .groups = 'drop') |> 
  group_by(ldaTopic) |> 
  mutate(topic_count = n()) |> 
  ungroup() |> 
  filter(topic_count == 1) |> 
  group_by(Section) |> 
  summarize(n_tops = n_distinct(ldaTopic), .groups = 'drop')
```

```{r topics-per-book}
plot <- chapters_topics_multi_prophets |> 
  group_by(book_name, Section) |> 
  summarize(n_tops = n_distinct(ldaTopic), .groups = 'drop') |> 
  ggplot(aes(x = fct_reorder(book_name, n_tops),
             y = n_tops)) + 
  geom_col(aes(fill = Section)) + 
  scale_fill_manual(values = c('darkgreen', 'lightgreen')) +
  coord_flip() + 
  theme_minimal() + 
  labs(title = 'Number of Topics by Book', 
       subtitle = "As we might expect, the longest books (Major Prophets) contain the\nmost topics for the most part",
       x = 'Book', 
       y = 'Number of Topics') + 
  theme(legend.position = 'bottom')

ggsave("num_tops_by_book.png", plot = plot, 
       width = 8, height = 4.5, dpi = 1200, 
       bg = 'white')

plot
```

# Build Book-to-Topic Network (multi topic)

```{r create-biadjacency-matrix}
chapter_prophet_top_multi_edgelist <- chapters_topics_multi_prophets |> 
  mutate(ldaTopic = as.character(ldaTopic)) |> 
  select(book_name, chapter, ldaTopic) |> 
  mutate(chapter = as.character(chapter))

row_nodes <- unique(chapter_prophet_top_multi_edgelist$book_name)
col_nodes <- unique(chapter_prophet_top_multi_edgelist$ldaTopic)

# Initialize the biadjacency matrix with zeros
biadj_matrix <- matrix(0, nrow = length(row_nodes), ncol = length(col_nodes),
                       dimnames = list(row_nodes, col_nodes))

# Populate the biadjacency matrix
for (i in 1:nrow(chapter_prophet_top_multi_edgelist)) {
  row <- chapter_prophet_top_multi_edgelist$book_name[i]
  col <- chapter_prophet_top_multi_edgelist$ldaTopic[i]
  biadj_matrix[row, col] <- biadj_matrix[row, col] + 1
}

chapter_prophet_top_multi_net <- 
  graph_from_biadjacency_matrix(incidence = biadj_matrix, 
                                mode = 'all', 
                                weighted = T)

chapter_prophet_top_multi_net
```

```{r check-two-mode}
type <- vertex_attr(chapter_prophet_top_multi_net, "type") # these are the two modes (word/chapter)

table(type)  
```

```{r check-weights}
E(chapter_prophet_top_multi_net)$weight
```

# Network Statistics

## View Network

```{r add-section-attr}
book_sections <- chapters_topics_multi_prophets |> 
  group_by(book_id, book_name) |> 
  summarise(Section = Section, .groups = 'drop') |> 
  distinct()

V(chapter_prophet_top_multi_net)$Section[type == FALSE] <- book_sections$Section
```

```{r plot, fig.height=8, fig.width=8}
set.seed(106)
plot <- ggnet2(chapter_prophet_top_multi_net,
       node.shape = if_else(V(chapter_prophet_top_multi_net)$type == FALSE, 
                            V(chapter_prophet_top_multi_net)$Section, 
                            'Topic'), 
       node.color = if_else(V(chapter_prophet_top_multi_net)$type == FALSE, 
                            V(chapter_prophet_top_multi_net)$Section, 
                            'Topic'), 
       palette = c(Topic = rgb(red = 1, 
                               green = 0.5, 
                               blue = 0.5,
                               alpha = 0.5),
                   "Major Prophets" = 'green4',
                   "Minor Prophets" = 'lightgreen'), 
       node.label = V(chapter_prophet_top_multi_net)$name, 
       node.alpha = 0.75,
       label.size = 2.5, 
       edge.size = E(chapter_prophet_top_multi_net)$weight/10,
       legend.position = 'none') + 
  labs(title = 'Book-to-Topic Network',
       subtitle = 'Edges sized by weight, which is determined by the number of times a topic appears in a chapter.\nNodes colored and shaped by mode and section.')

ggsave("network.png", plot = plot, 
       width = 8, height = 6, dpi = 1200, 
       bg = 'white')

plot
```

## Calculate Network Statistics

### Centrality

#### Degree

```{r calc-centrality}
degree_centrality <- igraph::degree(chapter_prophet_top_multi_net, 
                                    mode = 'all')

deg_cent <- degree_centrality |> 
  as_tibble() |> 
  mutate(node = degree_centrality |> names(), 
         node_level = c(rep(0, 17), rep(1, 43))) |> 
  select(node, node_level, value) |> 
  rename(deg_centrality = value) |> 
  arrange(desc(deg_centrality)) |> 
  mutate(node_type = case_when(node_level == 1 ~ "Topic Number",
                             node_level == 0 ~ "Minor Prophet")) |> 
  mutate(node_type = if_else(node == 'Isaiah' |
                               node == 'Jeremiah' |
                               node == 'Lamentations' |
                               node == 'Ezekiel' |
                               node == 'Daniel', 
                             "Major Prophet", 
                             node_type))

deg_cent
```

#### Eigenvector

```{r calc-eigen-cent}
eig_centrality <- igraph::eigen_centrality(chapter_prophet_top_multi_net, 
                                           scale = T)

eig_cent <- eig_centrality$vector |> 
  as_tibble() |> 
  mutate(node = eig_centrality$vector |> names(), 
         node_level = c(rep(0, 17), rep(1, 43))) |> 
  select(node, node_level, value) |> 
  rename(eig_centrality = value) |> 
  arrange(desc(eig_centrality)) |> 
  mutate(node_type = case_when(node_level == 1 ~ "Topic Number",
                             node_level == 0 ~ "Minor Prophet")) |> 
  mutate(node_type = if_else(node == 'Isaiah' |
                               node == 'Jeremiah' |
                               node == 'Lamentations' |
                               node == 'Ezekiel' |
                               node == 'Daniel', 
                             "Major Prophet", 
                             node_type))

eig_cent
```

#### Comparative Analysis of Both Centrality Scores

```{r table-wth-both}
all_cent <- full_join(deg_cent, eig_cent, 
                      by = join_by(node, node_level, node_type)) |> 
  select(node, node_level, node_type, everything())

all_cent
```

```{r calc-correlation}
cent_correlation <- cor(all_cent$deg_centrality, all_cent$eig_centrality)
cent_correlation
```

```{r make-long}
all_cent_long <- all_cent |> 
  pivot_longer(cols = contains("centrality"), 
               names_to = "centrality_type", 
               values_to = "centrality_score") |> 
  mutate(centrality_type = if_else(centrality_type == 'deg_centrality',
                                   "Degree Centrality", 
                                   "Eigenvector Centrality"))

all_cent_long
```

##### Visualizations

```{r distributions}
plot <- all_cent_long |> 
  ggplot(aes(x = centrality_score)) + 
  geom_histogram(aes(fill = centrality_type), bins = 5) + 
  scale_fill_manual(values = c('orange2', 'skyblue3')) +
  facet_grid(~centrality_type, 
             scales = 'free') + 
  theme_minimal() +
  theme(legend.position = 'none') +
  labs(title = "Distributions of Centrality Measures",
       subtitle = paste0("r ~ ", round(cent_correlation, digits = 3)),
       x = "Centrality Score")

ggsave("central_dists.png", plot = plot, 
       width = 8, height = 4.5, dpi = 1200, 
       bg = 'white')

plot
```

```{r prophet_cat_centrality}
plot <- all_cent_long |> 
  filter(node_type != 'Topic Number') |> 
  ggplot(aes(x = forcats::fct_reorder(node_type, centrality_score), 
             y = centrality_score)) + 
  geom_col(aes(fill = node_type)) +
  scale_fill_manual(values = c('darkgreen', 'lightgreen')) +
  theme_minimal() + 
  facet_wrap( ~ centrality_type, 
              ncol = 1, 
              scales = 'free') + 
  labs(title = 'Centrality Scores for the Traditional Categorization of this Section', 
       subtitle = 'Traditional Classification Appears Robust to Centrality Type', 
       y = 'Centrality Score', 
       x = 'Prophet Section', 
       fill = 'Prophet Section') +
  theme(legend.position = 'none') + 
  coord_flip()

ggsave("cent_scores_by_section.png", plot = plot, 
       width = 8, height = 4.5, dpi = 1200, 
       bg = 'white')

plot
```

```{r book-centrality}
plot <- all_cent_long |> 
  filter(node_type != 'Topic Number') |> 
  ggplot(aes(x = forcats::fct_reorder(node, centrality_score), 
             y = centrality_score)) + 
  geom_col(aes(fill = node_type)) +
  scale_fill_manual(values = c('darkgreen', 'lightgreen')) +
  theme_minimal() + 
  coord_flip() +
  facet_grid(~centrality_type,
             scales = 'free_x') +
  labs(title = 'Centrality Scores by Prophetic Book',
       subtitle = 'Scores show small evidence of need for a new classification beyond\nthe Major/Minor Division',
       x = 'Prophet Section', 
       y = 'Centrality Scores', 
       fill = 'Prophet Section') +
  theme(legend.position = 'bottom')

ggsave("cent_scores_by_book.png", plot = plot, 
       width = 8, height = 4.5, dpi = 1200, 
       bg = 'white')

plot
```

```{r book-cent-scatter}
library('ggrepel')
plot <- all_cent |> 
  filter(node_type != 'Topic Number') |> 
  ggplot(aes(y = deg_centrality, 
             x = eig_centrality)) + 
  geom_text_repel(aes(color = node_type,
                      label = node),
                  max.overlaps = 20) + 
  scale_color_manual(values = c('darkgreen', 'lightgreen')) +
  theme_minimal() +
  labs(title = 'Centrality Scores by Prophetic Book',
       subtitle = 'Scores show small evidence of need for a new classification beyond\nthe Major/Minor Division',
       y = 'Degree Centrality', 
       x = 'Eigenvector Centrality', 
       color = 'Prophet Section') +
  theme(legend.position = 'bottom') +
  ggplot2::annotate("text", x = 0, y = 17, 
           label = "NOTE: some text adjusted so as not to overlap.\nArrows point to true positions of\nsome overlapping Minor Prophets", 
           size = 2.5, 
           hjust = 0, 
           fontface = 'italic')

ggsave("cent_scores_by_book_scatter.png", plot = plot, 
       width = 8, height = 4.5, dpi = 1200, 
       bg = 'white')

plot
```

```{r topic_centrality}
plot <- all_cent_long |> 
  filter(node_type == "Topic Number") |>
  arrange(desc(centrality_score)) |> 
  slice_head(n = 10, by = centrality_type) |> 
  ggplot(aes(x = fct_reorder2(node, centrality_type, -centrality_score),
             y = centrality_score)) + 
  geom_col(fill = rgb(red = 1, 
                      green = 0.5, 
                      blue = 0.5)) + 
  coord_flip() + 
  theme_minimal() + 
  facet_grid( ~ centrality_type, 
             scale = 'free') +
  labs(title = '10 Most Central Topics', 
       subtitle = 'Both measures have the same 10 most central topics, though ordering does change',
       x = 'Topic Number', 
       y = 'Centrality Score')

ggsave("cent_score_by_topic.png", plot = plot, 
       width = 8, height = 4.5, dpi = 1200, 
       bg = 'white')

plot
```

```{r topic-centrality-scatter}
plot <- all_cent_long |> 
  filter(node_type == 'Topic Number') |> 
  arrange(desc(centrality_score)) |> 
  slice_head(n = 10, by = centrality_type) |> 
  group_by(node) |> 
  mutate(top_ten_count = n(), 
         top_ten_count = as.factor(top_ten_count), 
         top_ten_count = if_else(top_ten_count == 1, 
                                 "No", 
                                 "Yes")) |> 
  ungroup() |> 
  ggplot(aes(x = fct_reorder2(node, top_ten_count, centrality_score), 
             y = centrality_score, 
             fill = top_ten_count)) + 
  geom_col(position = 'dodge') +
  facet_wrap(~ centrality_type, scales = 'free_y') +
  scale_fill_manual(values = c("red4", rgb(red = 1, green = 0.5, blue = 0.5))) +
  theme_minimal() +
  labs(title = 'Centrality Scores by LDA Topic',
       subtitle = "Beyond topics 43 and 16, there's not much agreement on the level of topic centality.\nHowever, 6 of the top 10 topics are shared between the measures",
       x = 'Topic', 
       y = 'Centrality Score', 
       fill = 'Is the topic a top 10 topic in both measures?') + 
  theme(legend.position = "bottom")
  
ggsave("cent_scores_by_topic.png", plot = plot, 
       width = 8, height = 4.5, dpi = 1200, 
       bg = 'white')

plot
```

```{r centrality-vs-mode}
all_cent_long |> 
  mutate(node_level = if_else(node_level == 0, 
                              "Book", 
                              "Topic")) |> 
  group_by(node_level, centrality_type) |> 
  summarize(avg_cent = mean(centrality_score), 
            .groups = 'drop') |> 
  ggplot(aes(x = fct_reorder(node_level, avg_cent),
             y = avg_cent)) +
  geom_col(aes(fill = node_level)) + 
  facet_grid(~centrality_type, 
             scales = 'free') + 
  coord_flip() +
  scale_fill_manual(values = c('darkgreen', rgb(red = 1, 
                                                green = 0.5, 
                                                blue = 0.5))) +
  theme_minimal() + 
  labs(title = 'Centrality by Node Level', 
       subtitle = 'Books More Central than the Topics',
       x = 'Node Level', 
       y = 'Average Centrality') + 
  theme(legend.position = 'none')
```

```{r all-centrality-comparison}
plot <- all_cent_long |>
  arrange(desc(centrality_score)) |> 
  slice_head(n = 10, by = centrality_type) |> 
  group_by(node) |> 
  mutate(top_ten_count = n(), 
         top_ten_count = as.factor(top_ten_count), 
         top_ten_count = if_else(top_ten_count == 1, 
                                 "No", 
                                 "Yes")) |> 
  ungroup() |> 
  ggplot(aes(x = fct_reorder2(node, top_ten_count, -centrality_score), 
             y = centrality_score, 
             fill = node_type)) +
  scale_fill_manual(values = c('darkgreen', 'lightgreen', rgb(red = 1, 
                                                               green = 0.5, 
                                                               blue = 0.5))) +
  geom_col(position = 'dodge') +
  facet_wrap(~ centrality_type, scales = 'free_x') +
  theme_minimal() + 
  coord_flip() +
  theme(legend.position = 'bottom') +
  labs(title = 'Centrality Scores for All Nodes',
       subtitle = "Top 10 Centrality Scores across all Modes",
       x = 'Node', 
       y = 'Centrality Score', 
       fill = 'Node Type')

ggsave("cent_scores_overall.png", plot = plot, 
       width = 8, height = 4.5, dpi = 1200, 
       bg = 'white')

plot
```

### Clustering

#### Fast and Greedy

```{r get-clusters}
clusters <- cluster_fast_greedy(chapter_prophet_top_multi_net)

clusters
```

```{r save-clusters}
cluster_tib <- tibble(cluster = as.numeric(membership(clusters)),
       node = V(chapter_prophet_top_multi_net)$name) |> 
  mutate(node_level = c(rep(0, 17), rep(1, 43))) |>
  mutate(node_type = case_when(node_level == 1 ~ "Topic Number",
                             node_level == 0 ~ "Minor Prophet")) |> 
  mutate(node_type = if_else(node == 'Isaiah' |
                               node == 'Jeremiah' |
                               node == 'Lamentations' |
                               node == 'Ezekiel' |
                               node == 'Daniel', 
                             "Major Prophet", 
                             node_type)) |> 
  arrange(cluster)

cluster_tib
```

```{r analyze}
plot <- cluster_tib |> 
  #mutate(node_level = if_else(node_level == 1, "Topic", "Book")) |> 
  group_by(cluster, node_type) |> 
  summarize(n_nodes = n(), .groups = 'drop') |> 
  ggplot(aes(x = cluster,
             y = n_nodes, 
             fill = as.factor(node_type))) +
  scale_fill_manual(values = c('darkgreen', "lightgreen", rgb(red = 1, 
                                                green = 0.5, 
                                                blue = 0.5))) + 
  geom_col(position = 'dodge') + 
  theme_minimal() + 
  theme(legend.position = 'bottom') + 
  labs(title = "Number of Nodes in Each Cluster, Disaggregated by Node Type", 
       subtitle = 'modularity ~ 0.32',
       x = "Cluster", 
       y = 'Number of Nodes', 
       fill = 'Node Type')

ggsave("clusters_by_node_type.png", plot = plot, 
       width = 8, height = 4.5, dpi = 1200, 
       bg = 'white')

plot
```

```{r does-cent-predict-clust}
mod <- lm(cluster ~ node_type + degree_centrality + eig_centrality, 
           data = full_join(all_cent, cluster_tib))
summary(mod)
tab_model(mod)
```

# Final Network Viz

```{r attach-stats-to-network}
V(chapter_prophet_top_multi_net)$cluster <- as.character(membership(clusters))
V(chapter_prophet_top_multi_net)$deg_centrality <- 
  igraph::degree(chapter_prophet_top_multi_net, 
                 mode = 'all')
V(chapter_prophet_top_multi_net)$eig_centrality <- 
  igraph::eigen_centrality(chapter_prophet_top_multi_net, 
                           scale = T)$vector

chapter_prophet_top_multi_net
```

```{r cluster_plot}
set.seed(106)
plot <- ggnet2(chapter_prophet_top_multi_net,
       node.shape = if_else(V(chapter_prophet_top_multi_net)$type == FALSE, 
                            V(chapter_prophet_top_multi_net)$Section, 
                            'Topic'), 
       node.color = V(chapter_prophet_top_multi_net)$cluster, 
       palette = c("1" = '#377eb8', 
                   "2" = '#e41a1c', 
                   "3" = '#4daf4a',
                   "4" = 'orange2',
                   "5" = '#984ea3'), 
       node.label = V(chapter_prophet_top_multi_net)$name, 
       label.size = 3, 
       node.alpha = 0.75,
       #node.size = (V(chapter_prophet_top_multi_net)$eig_centrality),
       legend.position = 'bottom', 
       edge.color = 'gray85', 
       edge.size = E(chapter_prophet_top_multi_net)$weight/10) +
  labs(title = 'Book-to-Topic Network',
       subtitle = 'Nodes colored by their cluster and shaped based on their section')

ggsave("final_network.png", plot = plot, 
       width = 8, height = 6, dpi = 1200, 
       bg = 'white')

plot
```
